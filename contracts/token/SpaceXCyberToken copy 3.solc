// contracts/token/SpaceXCyberToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

contract SpaceXCyberToken is IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    /**
     * address exclude fee and tax
     */
    mapping(address => bool) private _isExcludedFromFee;

    /**
     * total max supply
     */
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _totalSupply = 100 * 10**6 * 10**9;
    uint256 private _rTotal = (MAX - (MAX % _totalSupply));

    /**
     * tax and fee
     */
    uint256 private _redisFeeOnBuy = 1;
    uint256 private _taxFeeOnBuy = 6;

    uint256 private _redisFeeOnSell = 1;
    uint256 private _taxFeeOnSell = 6;

    uint256 private _redisFee;
    uint256 private _taxFee;

    /**
     * defire token name and symbol, decimal
     */
    string private constant _name = "SpaceXCyberToken";
    string private constant _symbol = "SXC";
    uint8 private constant _decimals = 9;

    /**
     * pool Address and mkt received tax
     */
    address payable private _poolAddress =
        payable(0xb61fea4a424ae075c8CFac232Ac48cBE699007aB);
    address payable private _marketingAddress =
        payable(0x0ADa28Df8C10009044e7ff005694C5959F90A3B8);

    /**
     * swap router => swap tax to pool and mkt wallet
     */
    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    /**
     * key lock swap when swap
     */
    bool private swapEnabled = true;
    bool private inSwap = false;

    modifier lockTheSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor() {
        _balances[owner()] = _rTotal;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0xD99D1c33F9fC3444f8101754aBC46c52416550D1
        );
        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_poolAddress] = true;
        _isExcludedFromFee[_marketingAddress] = true;

        emit Transfer(
            address(0x0000000000000000000000000000000000000000),
            owner(),
            _totalSupply
        );
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_balances[account]);
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function tokenFromReflection(uint256 rAmount)
        private
        view
        returns (uint256)
    {
        require(
            rAmount <= _rTotal,
            "Amount must be less than total reflections"
        );
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        _redisFee = 0;
        _taxFee = 0;

        if (from != owner() && to != owner() && from != uniswapV2Pair) {
            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap && swapEnabled && contractTokenBalance > 0) {
                _swapTokens(contractTokenBalance);
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance > 0) {
                    _sendBalanceToFee(address(this).balance);
                }
            }

            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {
                _redisFee = _redisFeeOnBuy;
                _taxFee = _taxFeeOnBuy;
            }

            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {
                _redisFee = _redisFeeOnSell;
                _taxFee = _taxFeeOnSell;
            }

            if (
                (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||
                (from != uniswapV2Pair && to != uniswapV2Pair)
            ) {
                _redisFee = 0;
                _taxFee = 0;
            }
        }

        _tokenTransfer(from, to, amount);
    }

    function _swapTokens(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function _sendBalanceToFee(uint256 amount) private {
        uint256 taxToPool = 80;
        _poolAddress.transfer(amount.mul(taxToPool).div(100));
        _marketingAddress.transfer(amount - amount.mul(taxToPool).div(100));
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        _transferStandard(sender, recipient, amount);
    }

    event PoolAddressUpdated(address indexed previous, address indexed adr);

    function setPoolAddress(address payable address_) public onlyOwner {
        emit PoolAddressUpdated(_poolAddress, address_);
        _poolAddress = address_;
        _isExcludedFromFee[_poolAddress] = true;
    }

    event MarketingAddressUpdated(
        address indexed previous,
        address indexed adr
    );

    function setNewMarketingAddress(address payable address_) public onlyOwner {
        emit MarketingAddressUpdated(_marketingAddress, address_);
        _marketingAddress = address_;
        _isExcludedFromFee[_marketingAddress] = true;
    }

    function _transferStandard(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 rFee,
            uint256 tTransferAmount,
            uint256 tTeam
        ) = _getValues(tAmount);
        _balances[sender] = _balances[sender].sub(rAmount);
        _balances[recipient] = _balances[recipient].add(rTransferAmount);
        _takeTeam(tTeam);
        _reflectFee(rFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _takeTeam(uint256 tTeam) private {
        uint256 currentRate = _getRate();
        uint256 rTeam = tTeam.mul(currentRate);
        _balances[address(this)] = _balances[address(this)].add(rTeam);
    }

    function _reflectFee(uint256 rFee) private {
        _rTotal = _rTotal.sub(rFee);
    }

    function _getValues(uint256 tAmount)
        private
        view
        returns (
            uint256,
            uint256,
            uint256,
            uint256,
            uint256
        )
    {
        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(
            tAmount,
            _redisFee,
            _taxFee
        );
        uint256 currentRate = _getRate();
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(
            tAmount,
            tFee,
            tTeam,
            currentRate
        );
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tTeam);
    }

    function _getTValues(
        uint256 tAmount,
        uint256 taxFee,
        uint256 TeamFee
    )
        private
        pure
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 tFee = tAmount.mul(taxFee).div(100);
        uint256 tTeam = tAmount.mul(TeamFee).div(100);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
        return (tTransferAmount, tFee, tTeam);
    }

    function _getRValues(
        uint256 tAmount,
        uint256 tFee,
        uint256 tTeam,
        uint256 currentRate
    )
        private
        pure
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rTeam = tTeam.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _totalSupply;
        if (rSupply < _rTotal.div(_totalSupply)) return (_rTotal, _totalSupply);
        return (rSupply, tSupply);
    }

    function manualswap() external {
        require(
            _msgSender() == _poolAddress ||
                _msgSender() == _marketingAddress ||
                _msgSender() == owner()
        );
        uint256 contractBalance = balanceOf(address(this));
        _swapTokens(contractBalance);
    }

    function manualsend() external onlyOwner {
        require(
            _msgSender() == _poolAddress ||
                _msgSender() == _marketingAddress ||
                _msgSender() == owner()
        );
        uint256 contractETHBalance = address(this).balance;
        _sendBalanceToFee(contractETHBalance);
    }

    function setFee(
        uint256 redisFeeOnBuy,
        uint256 redisFeeOnSell,
        uint256 taxFeeOnBuy,
        uint256 taxFeeOnSell
    ) public onlyOwner {
        require(redisFeeOnBuy <= 2, "Redis cannot be more than 10.");
        require(redisFeeOnSell <= 2, "Redis cannot be more than 10.");
        require(taxFeeOnBuy <= 6, "Tax cannot be more than 6.");
        require(taxFeeOnSell <= 6, "Tax cannot be more than 6.");
        _redisFeeOnBuy = redisFeeOnBuy;
        _redisFeeOnSell = redisFeeOnSell;
        _taxFeeOnBuy = taxFeeOnBuy;
        _taxFeeOnSell = taxFeeOnSell;
    }

    function toggleSwap(bool _swapEnabled) public onlyOwner {
        swapEnabled = _swapEnabled;
    }

    function excludeMultipleAccountsFromFees(
        address[] calldata accounts,
        bool excluded
    ) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFee[accounts[i]] = excluded;
        }
    }
}
